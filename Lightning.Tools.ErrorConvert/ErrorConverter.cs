using Lightning.Core;
using Lightning.Core.API; 
using Lightning.Utilities; 
using System;
using System.Collections.Generic;
using System.IO; 
using System.Text;
using System.Xml;

namespace Lightning.Tools.ErrorConvert
{
    public class ErrorConverter
    {
        /// <summary>
        /// ConvertOldToNew
        /// 
        /// July 3, 2021
        /// 
        /// Converts old-style (Errors.xml) to new-style (RegisterErrors.cs) error registration file
        /// </summary>
        /// <param name="Arguments"></param>
        /// <returns></returns>
        public GenericResult ConvertOldToNew(LaunchArgs Arguments)
        {
            GenericResult GR = new GenericResult();

            if (!File.Exists(Arguments.OldFile))
            {
                GR.FailureReason = Strings.STRING_ERROR_OLD_FILE_NOT_FOUND;
                return GR; 
            }
            else
            {
                // very hacky but this is a very quick and dirty tool
                string FPath = Arguments.OldFile;

                XmlSchemaResult XSR = ErrorManager.SerialiseErrors_Validate(FPath);

                if (!XSR.Successful)
                {
                    GR.FailureReason = $"{Strings.STRING_ERROR_ERROR_VALIDATING_OLD_XML}: {XSR.FailureReason}";
                    return GR; 
                }
                else
                {
                    ErrorSerialisationResult ESR = ErrorManager.SerialiseErrors_Serialise(FPath);

                    if (!ESR.Successful)
                    {
                        GR.FailureReason = $"{Strings.STRING_ERROR_ERROR_SERIALISING_OLD_XML}: {XSR.FailureReason}";
                        return GR;
                    }
                    else
                    {
                        return ConvertToNew(Arguments, ESR.ErrorCollection, Arguments.NewFile);
                    }
                }
            }
        }


        private GenericResult ConvertToNew(LaunchArgs Arguments, ErrorCollection Errors, string FPath)
        {
            GenericResult GR = new GenericResult();

            try
            {
                FileStream FS = File.Create(FPath);

                using (StreamWriter SW = new StreamWriter(FS))
                {


                    // write code
                    SW.WriteLine("using System;");
                    SW.WriteLine("using System.Collections.Generic;");
                    SW.WriteLine("using System.Text;"); // based on VS C# template

                    SW.WriteLine(""); // insert extra line


                    if (Arguments.Namespace == null)
                    {
                        SW.WriteLine("namespace Lightning.Core");

                    }
                    else
                    {
                        SW.WriteLine($"namespace {Arguments.Namespace}");
                    }

                    SW.WriteLine("{");
                    SW.WriteLine(""); // insert extra empty line for padding
                    // Generated code comment block

                    string DateString = DateTime.Now.ToString("MMMM d, yyyy HH:mm:ss");

                    string EmptyCommentString = "///";

                    SW.WriteLine("/// <summary>");
                    SW.WriteLine("/// ErrorRegistration");
                    SW.WriteLine(EmptyCommentString);
                    SW.WriteLine($"/// Generated by Lightning.Tools.ErrorConvert - {DateString}");
                    SW.WriteLine(EmptyCommentString);
                    SW.WriteLine("/// Registers errors for use with the new (internally based) Error Manager");
                    SW.WriteLine("/// </summary>");

                    //todo: add classnanme/methodname?
                    SW.WriteLine($" public static class ErrorRegistration");
                    SW.WriteLine($" {{");

                    SW.WriteLine($"     public static void RegisterErrors()");
                    SW.WriteLine($"     {{");

                    foreach (Error Err in Errors)
                    {
                        // todo: errorclassname?
                        SW.WriteLine($"         ErrorManager.RegisterError( new Error {{ Name = \"{Err.Name}\", Description = \"{Err.Description}\", Severity = MessageSeverity.{Err.Severity}, Id = {Err.Id} }} );");
                    }

                    SW.WriteLine("      }");

                    SW.WriteLine("  }");

                    SW.WriteLine("}");


                }

                GR.Successful = true;
                return GR; 
            }
            catch (PathTooLongException err)
            {
#if DEBUG
                GR.FailureReason = $"{Strings.STRING_ERROR_PATH_TOO_LONG} - {err}";
#else
                GR.FailureReason = Strings.STRING_ERROR_PATH_TOO_LONG;                
#endif
                return GR; 
            }
            catch (IndexOutOfRangeException err)
            {
#if DEBUG
                GR.FailureReason = $"{Strings.STRING_ERROR_INDEX_OUT_OF_RANGE} - {err}";
#else
                GR.FailureReason = Strings.STRING_ERROR_INDEX_OUT_OF_RANGE;
#endif
                return GR; 
            }
            catch (IOException err)
            {
#if DEBUG
                GR.FailureReason = $"{Strings.STRING_ERROR_GENERIC_ERROR_WRITING_NEW_FILE} - {err}";
#else
                GR.FailureReason = Strings.STRING_ERROR_GENERIC_ERROR_WRITING_NEW_FILE;            
#endif
                return GR;
            }
        }
    }
}
